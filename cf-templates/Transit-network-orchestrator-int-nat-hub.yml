Description: >
    This template deploys the serverless transit network orchestrator internal nat hub stack
    Author: Soumya Mohanty <Soumya.Mohanty@pb.com>

Parameters:
  Principals:
    Type: CommaDelimitedList
    Description: AWS account numbers eg. 123456789012 (comma seperated) OR the ARN of an Organization to share TGW with the principals eg. arn:aws:organizations::<ORG_MASTER_ACCOUNT_ID>:organization/o-exampleorgid.

  PrincipalType:
    Type: String
    Description: Either provide list of accounts (comma seperated) or AWS Organizations ARN
    Default: 'List of Accounts'
    AllowedValues:
      - 'AWS Organization ARN'
      - 'List of Accounts'
      
  pAmazonASNINTNAT:
    Type: String
      
  environment:
    Type: String
      
  techContact:
    Type: String

  ApprovalNotification:
    Description: Do you want to send notification to the Network Admin for approval?
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Type: String
  
  AuditTrailRetentionPeriod:
    Description: Specifies the number of days you want to retain audit history in Amazon DynamoDB
    Type: Number
    Default: 90
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  AttachmentTag:
    Description: Custom tag key name to trigger the TGW VPC attachment workflow.
    Default: Attach-to-nattgw
    Type: String
    MinLength: 0
    MaxLength: 100
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-_]*$'

  AssociationTag:
    Description: Custom tag key name to trigger the TGW route table association with TGW attachment workflow.
    Default: Associate-with-nat
    Type: String
    MinLength: 0
    MaxLength: 100
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-_]*$'

  PropagationTag:
    Description: Custom tag key name to trigger the route propagation to TGW route table(s) workflow.
    Default: Propagate-to-nat
    Type: String
    MinLength: 0
    MaxLength: 100
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-_]*$'

  DefaultRoute:
    Description: Default/Static route(s) to Transit Gateway - spoke account route table associated with the tagged subnets.
    Default: "INT-NAT-Traffic (10/8, 152.144/16, 161.228/16)"
    Type: String
    AllowedValues:
      - "EXT-NAT-Traffic (0/0, EXT-NAT)"
      - "INT-NAT-Traffic (10/8, 152.144/16, 161.228/16)"
      - "Configure-Manually"
      
  EXTNATTraffic:
    Type: String
  INTNATTraffic:
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Account Structure
        Parameters:
          - PrincipalType
          - Principals
      - Label:
          default: Notification Settings
        Parameters:
          - ApprovalNotification
      - Label:
          default: Network Settings
        Parameters:
          - DefaultRoute
      - Label:
          default: Tag Settings
        Parameters:
          - AttachmentTag
          - AssociationTag
          - PropagationTag
      - Label:
          default: Audit Trail Retention Settings
        Parameters:
          - AuditTrailRetentionPeriod

    ParameterLabels:
      Principals:
        default: Account List or AWS Organizations ARN
      PrincipalType:
        default: Principal Type
      ApprovalNotification:
        default: Receive Approval Notifications
      DefaultRoute:
        default: Default Route to TGW
      AttachmentTag:
        default: Tag key for TGW Attachment
      AssociationTag:
        default: Tag key for TGW Route Table Association with TGW Attachment
      PropagationTag:
        default: Tag key for Route Propagation to TGW Route Table(s)
      AuditTrailRetentionPeriod:
        default: Audit Trail Retention Period


Conditions:
  NotificationCondition: !Equals [!Ref ApprovalNotification, 'Yes']
  IsNotMemberOfOrganization: !Equals [!Ref PrincipalType, 'List of Accounts']

Mappings:
  NetworkConfiguration:
    TransitGateway:
      AutoAcceptSharedAttachments: "enable" # the solution assumes this setting is set to 'enable'.
      DefaultRouteTableAssociation: "disable" # the solution assumes this setting is set to 'disable'.
      DefaultRouteTablePropagation: "disable" # the solution assumes this setting is set to 'disable'.
      DnsSupport: "enable" # this value can be changed based on customer preference
      VpnEcmpSupport: "enable" # this value can be changed based on customer preference    
  
  LambdaFunction:
    Logging:
      Level: "info"
  EventBridge:
    Bus:
      Name: "STNO-INT-NAT"
  SourceCode:
    General:
      S3Bucket: "gcs-lambda-functions"
      KeyPrefix: "TransitGateway"
      Version: "v1.0.0"
    Variables:
      WaitTime: "10"
      ApprovalTagKey: "ApprovalRequired"
      ApprovalTagValue: "No"
  Solution:
    Metrics:
      SendAnonymousData: "Yes"


Resources:

  # The following description enables the idempotency and CFN template will not rollback if the role
  # already exist. Do not change the description below.
  CustomServiceLinkedRole:
    Type: "AWS::IAM::ServiceLinkedRole"
    Properties:
      AWSServiceName: 'ram.amazonaws.com'
      Description: Allows RAM to access Organizations on your behalf.

  AWSTransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AmazonSideAsn: !Ref pAmazonASNINTNAT
      Description: "This transit gateway was created by AWS Serverless Transit Network Orchestrator"
      AutoAcceptSharedAttachments: !FindInMap [NetworkConfiguration, TransitGateway, AutoAcceptSharedAttachments]
      DefaultRouteTableAssociation: !FindInMap [NetworkConfiguration, TransitGateway, DefaultRouteTableAssociation]
      DefaultRouteTablePropagation: !FindInMap [NetworkConfiguration, TransitGateway, DefaultRouteTablePropagation]
      DnsSupport: !FindInMap [NetworkConfiguration, TransitGateway, DnsSupport]
      VpnEcmpSupport: !FindInMap [NetworkConfiguration, TransitGateway, VpnEcmpSupport]
      Tags:
        - Key: Name
          Value: !Join ["-", ["int-nat-tgw", Ref: "environment"]]
        - Key: AWS Solutions
          Value: !Ref 'AWS::StackId'
        - Key: application
          Value: cloudnative
        - Key: subsystem
          Value: network
        - Key: tier
          Value: app
        - Key: techcontact
          Value: !Ref techContact

  APPINTNATTGWRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !Ref AWSTransitGateway
      Tags:
        - Key: Name
          Value: !Join ["-", ["app-int-nat-tgw", Ref: "environment", "rtb"]]
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: !FindInMap ["SourceCode", "Variables", "ApprovalTagKey"]
          Value: !FindInMap ["SourceCode", "Variables", "ApprovalTagValue"]
        - Key: application
          Value: cloudnative
        - Key: subsystem
          Value: network
        - Key: tier
          Value: app
        - Key: techcontact
          Value: !Ref techContact

  INTNATINTNATTGWRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !Ref AWSTransitGateway
      Tags:
        - Key: Name
          Value: !Join ["-", ["int-nat-int-nat-tgw", Ref: "environment", "rtb"]]
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: !FindInMap ["SourceCode", "Variables", "ApprovalTagKey"]
          Value: !FindInMap ["SourceCode", "Variables", "ApprovalTagValue"]
        - Key: application
          Value: cloudnative
        - Key: subsystem
          Value: network
        - Key: tier
          Value: app
        - Key: techcontact
          Value: !Ref techContact
  
  TGWResourceShare:
    DependsOn:
      - CustomServiceLinkedRole
    Type: "AWS::RAM::ResourceShare"
    Properties:
      Name: !Join ['', ['Transit Gateway Resource Share int nat', !Ref 'environment']]
      ResourceArns:
        - !Join ['', ['arn:aws:ec2:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':transit-gateway/', !Ref AWSTransitGateway]]
      Principals: !Ref Principals
      Tags:
        - Key: AWS Serverless Transit Network Orchestrator
          Value: !Ref 'AWS::StackId'

  # IAM Role for Serverless Transit Network Orchestrator Administration in the Hub account
  TransitNetworkAdministrationRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Allow * in the ARN of the execution role to allow cross account access to user defined spoke accounts."
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join ["-", ["AssumeRole-TransitNetworkExecutionRole", Ref: "AWS::Region"]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Join ["-", ["arn:aws:iam::*:role/TransitNetworkExecutionRole", Ref: "AWS::Region"]]

  #
  # Cloudwatch Rule for Accounts (not in organization)
  #
  LambdaEventRuleSpokeAccounts:
    Type: AWS::Events::Rule
    Condition: IsNotMemberOfOrganization
    Properties:
      Description: Serverless Transit Network Orchestrator - Rule for tag on resource events from the spoke accounts
      EventBusName: !Ref STNOCustomEventBus
      EventPattern:
        {
          "account": !Ref Principals,
          "source": [
            "aws.tag"
          ],
          "detail-type": [
            "Tag Change on Resource"
          ],
          "detail": {
            "service": [
              "ec2"
            ],
            "resource-type": [
              "subnet",
              "vpc"
            ],
            "changed-tag-keys": [
              Ref: "AttachmentTag",
              Ref: "AssociationTag",
              Ref: "PropagationTag"
            ]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !Sub ${CustomResourceLambda.Arn}
          Id: 'Custom-Resource-Lambda-Function'

  #
  # Cloudwatch Rule for Hub Account (not in organization)
  #
  LambdaEventRuleHubAccount:
    Type: AWS::Events::Rule
    Properties:
      Description: Serverless Transit Network Orchestrator - Rule for tag on resource events from hub account
      EventPattern:
        {
          "account": [
            !Ref "AWS::AccountId"
          ],
          "source": [
            "aws.tag"
          ],
          "detail-type": [
            "Tag Change on Resource"
          ],
          "detail": {
            "service": [
              "ec2"
            ],
            "resource-type": [
              "subnet",
              "vpc"
            ],
            "changed-tag-keys": [
              Ref: "AttachmentTag",
              Ref: "AssociationTag",
              Ref: "PropagationTag"
            ]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !Sub ${CustomResourceLambda.Arn}
          Id: 'Custom-Resource-Lambda-Function'

  STNOCustomEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Join ["-", [!FindInMap [EventBridge, Bus, Name], Ref: "environment"]]

  EventBusPermission:
    Type: Custom::CWEventPermissions
    Properties:
      Principals: !Ref Principals
      EventBusName: !Ref STNOCustomEventBus
      ServiceToken: !GetAtt CustomResourceLambda.Arn

  CustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: !FindInMap [LambdaFunction, Logging, Level]
          STATE_MACHINE_ARN: !Ref OrchestratorStateMachine
          METRICS_FLAG: !FindInMap [Solution, Metrics, SendAnonymousData]
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],"TransitNetworkOrchestratorCRLambda.zip"]]
      FunctionName: !Join ["-", ["TransitNetworkOrchestratorCRLambdaINTNAT", Ref: "environment"]]
      Description: AWS Serverless Transit Network Orchestrator Custom Resource
      Handler: lambda_custom_resource.lambda_handler
      MemorySize: 1536
      Role: !GetAtt 'CustomResourceLambdaRole.Arn'
      Runtime: python3.7
      Timeout: 900
      TracingConfig:
          Mode: Active

  LambdaPermissionSpokeAccount:
    Type: AWS::Lambda::Permission
    Condition: IsNotMemberOfOrganization
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEventRuleSpokeAccounts.Arn
      FunctionName: !Ref CustomResourceLambda

  LambdaPermissionHubAccount:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEventRuleHubAccount.Arn
      FunctionName: !Ref CustomResourceLambda

  CustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Allow * in the ARN of the execution role to allow access to user created resource - IAM Service Message: The actions in your policy do not support resource-level
permissions and require you to choose All resources"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - appsync.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join ["-", ["TransitNetworkOrchestratorCRLambdaRoleintnat", Ref: "environment", Ref: "AWS::Region"]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'  # IAM Service Message: The actions in your policy do not support resource-level permissions and require you to choose All resources
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource: !Sub arn:aws:iam::${AWS::Region}:role/*
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:DeleteParameter
                  - ssm:GetParametersByPath
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeSubnets
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}::vpc/*
              - Effect: Allow
                Action:
                  - events:DescribeEventBus
                  - events:RemovePermission
                  - events:PutPermission
                Resource: !GetAtt STNOCustomEventBus.Arn
              - Effect: Allow
                Action:
                  - states:DescribeStateMachine
                  - states:DescribeStateMachineForExecution
                  - states:DescribeExecution
                  - states:ListExecutions
                  - states:StartExecution
                  - states:StopExecution
                Resource:
                  - !Ref OrchestratorStateMachine
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectTagging"
                  - "s3:ListBucket"
                  - "s3:GetObjectAcl"
                Resource:
                  - !Join ["", ["arn:aws:s3:::",!FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "AWS::Region"]]
                  - !Join ["", ["arn:aws:s3:::", !FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "AWS::Region","/*"]]
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:TransitNetworkOrchestratorCRLambdaINTNAT*
                Action:
                  - lambda:InvokeFunction


  DynamoDbTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
        AttributeDefinitions:
            - AttributeName: SubnetId
              AttributeType: S
            - AttributeName: Version
              AttributeType: S
        KeySchema:
            - AttributeName: SubnetId
              KeyType: HASH
            - AttributeName: Version
              KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: TimeToLive
          Enabled: true
        BillingMode: PAY_PER_REQUEST

  StateMachineLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: !FindInMap [LambdaFunction, Logging, Level]
          APPROVAL_NOTIFICATION: !Ref ApprovalNotification
          TGW_ID: !Ref AWSTransitGateway
          TABLE_NAME: !Ref DynamoDbTable
          ASSOCIATION_TAG: !Ref AssociationTag
          PROPAGATION_TAG: !Ref PropagationTag
          ATTACHMENT_TAG: !Ref AttachmentTag
          DEFAULT_ROUTE: !Ref DefaultRoute
          EXT_NAT_TRAFFIC: !Ref EXTNATTraffic
          INT_NAT_ROUTES: !Ref INTNATTraffic
          WAIT_TIME: !FindInMap ["SourceCode", "Variables", "WaitTime"]
          TTL: !Ref AuditTrailRetentionPeriod
          APPROVAL_KEY: !FindInMap ["SourceCode", "Variables", "ApprovalTagKey"]
          FIRST_PRINCIPAL: !Select [ 0, !Ref Principals ]
          RESOURCE_SHARE_ARN: !GetAtt TGWResourceShare.Arn
          METRICS_FLAG: !FindInMap ["Solution", "Metrics", "SendAnonymousData"]
          SOLUTION_VERSION: v1.0.0
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],"TransitNetworkOrchestratorSMLambda.zip"]]
      FunctionName: !Join ["-", ["TransitNetworkOrchestratorSMLambdaINTNAT", Ref: "environment"]]
      Description: AWS Serverless Transit Network Orchestrator State Machine Handler
      Handler: state_machine_router.lambda_handler
      MemorySize: 1536
      Role: !GetAtt 'StateMachineLambdaRole.Arn'
      Runtime: python3.7
      Timeout: 900
      TracingConfig:
          Mode: Active


  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - !Sub "states.${AWS::Region}.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "lambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: !GetAtt StateMachineLambda.Arn

  StateMachineLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Allow * because it is required for making Describe and xray API calls as they don't support resource-level permissions and require you to choose All resources."
          - id: W28
            reason: "The role name 'TransitNetworkOrchestratorSMLambda' has to be defined to allow cross account access from the hub account to make network changes."
    Properties:
      RoleName: !Join ["-", ["TransitNetworkOrchestratorSMLambdaRoleintnat", Ref: "environment", Ref: "AWS::Region"]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join ["-", ["TransitNetworkOrchestratorSMLambdaintnat", Ref: "environment", Ref: "AWS::Region"]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'  # IAM Service Message: The actions in your policy do not support resource-level permissions and require you to choose All resources
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource: !Sub arn:aws:iam::${AWS::Region}:role/*
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:DeleteParameter
                  - ssm:GetParametersByPath
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:CreateTransitGatewayRoute
                  - ec2:DeleteTransitGatewayRoute
                  - ec2:ModifyTransitGatewayVpcAttachment
                  - ec2:CreateTransitGatewayVpcAttachment
                  - ec2:DeleteTransitGatewayVpcAttachment
                  - ec2:AssociateTransitGatewayRouteTable
                  - ec2:DisableTransitGatewayRouteTablePropagation
                  - ec2:DisassociateTransitGatewayRouteTable
                  - ec2:EnableTransitGatewayRouteTablePropagation
                Resource: # use * for account id as the owner of the resource is spoke account
                  - !Sub arn:aws:ec2:${AWS::Region}:*:transit-gateway-route-table/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:transit-gateway/*
                  - !Sub arn:aws:ec2:${AWS::Region}:*:transit-gateway-attachment/*
                  - !Sub arn:aws:ec2:${AWS::Region}:*:vpc/*
                  - !Sub arn:aws:ec2:${AWS::Region}:*:subnet/*
                  - !Sub arn:aws:ec2:${AWS::Region}:*:route-table/*
              - Effect: Allow
                Action:
                  - ec2:DescribeTransitGatewayVpcAttachments
                  - ec2:DescribeTransitGatewayAttachments
                  - ec2:DescribeTransitGatewayRouteTables
                  - ec2:GetTransitGatewayAttachmentPropagations
                  - ec2:GetTransitGatewayRouteTableAssociations
                  - ec2:GetTransitGatewayRouteTablePropagations
                  - ec2:SearchTransitGatewayRoutes
                Resource: "*"
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Join ["-", ["arn:aws:iam::*:role/TransitNetworkExecutionRole", Ref: "AWS::Region"]]
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:TransitNetworkOrchestratorSMLambdaINTNAT*
                Action:
                  - lambda:InvokeFunction
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt DynamoDbTable.Arn
  
  OrchestratorStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: !Join ["-", ["TransitNetworkOrchestratorStateMachineINTNAT", Ref: "environment"]]
      RoleArn: !GetAtt 'StateMachineRole.Arn'
      DefinitionString:
        Fn::Sub: |-
          {
            "Comment": "A state machine that orchestrates transit network changes.",
            "StartAt": "Describe Resources Pass",
            "States": {
              "Describe Resources Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "VPC",
                  "FunctionName": "describe_resources"
                },
                "ResultPath": "$.params",
                "Next": "Describe Resources"
              },
              "Describe Resources": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "Describe Transit Gateway VPC Attachments Pass"
              },
              "Describe Transit Gateway VPC Attachments Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "TransitGateway",
                  "FunctionName": "describe_transit_gateway_vpc_attachments"
                },
                "ResultPath": "$.params",
                "Next": "Describe Transit Gateway VPC Attachments"
              },
              "Describe Transit Gateway VPC Attachments": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "Describe TGW Route Tables Pass"
              },
              "Describe TGW Route Tables Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "TransitGateway",
                  "FunctionName": "describe_transit_gateway_route_tables"
                },
                "ResultPath": "$.params",
                "Next": "Describe TGW Route Tables"
              },
              "Describe TGW Route Tables": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "Requires Approval?"
              },
              "Requires Approval?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "And": [
                      {
                        "Variable": "$.ApprovalRequired",
                        "StringEquals": "yes"
                      },
                      {
                        "Not": {
                          "Variable": "$.AdminAction",
                          "StringEquals": "accept"
                        }
                      }
                    ],
                    "Next": "Yes"
                  }
                ],
                "Default": "No"
              },
              "Yes": {
                "Type": "Pass",
                "ResultPath": "$.params",
                "Next": "Send Approval Notification Pass"
              },
              "Send Approval Notification Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "ApprovalNotification",
                  "FunctionName": "notify"
                },
                "ResultPath": "$.params",
                "Next": "Send Approval Notification"
              },
              "Send Approval Notification": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "Update DynamoDB Pass"
              },
              "No": {
                "Type": "Pass",
                "ResultPath": "$.params",
                "Next": "Event Source?"
              },
              "Event Source?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.TagEventSource",
                    "StringEquals": "subnet",
                    "Next": "Resource Share Invitation Pass"
                  }
                ],
                "Default": "VPC Tagged?"
              },
              "Resource Share Invitation Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "ResourceAccessManager",
                  "FunctionName": "accept_resource_share_invitation"
                },
                "ResultPath": "$.params",
                "Next": "Resource Share Invitation"
              },
              "Resource Share Invitation": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "Get Transit Gateway VPC Attachment State Pass"
              },
              "Get Transit Gateway VPC Attachment State Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "TransitGateway",
                  "FunctionName": "describe_transit_gateway_vpc_attachments"
                },
                "ResultPath": "$.params",
                "Next": "Get Transit Gateway VPC Attachment State"
              },
              "Get Transit Gateway VPC Attachment State": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "TGW Attachment Change In Progress?"
              },
              "TGW Attachment Change In Progress?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Or": [
                      {
                        "Variable": "$.AttachmentState",
                        "StringEquals": "modifying"
                      },
                      {
                        "Variable": "$.AttachmentState",
                        "StringEquals": "pending"
                      }
                    ],
                    "Next": "Wait for TGW Attachment Change To Finish"
                  }
                ],
                "Default": "TGW Attachment CRUD Operations Pass"
              },
              "Wait for TGW Attachment Change To Finish": {
                "Type": "Wait",
                "Seconds": 15,
                "Next": "Get Transit Gateway VPC Attachment State"
              },
              "TGW Attachment CRUD Operations Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "TransitGateway",
                  "FunctionName": "tgw_attachment_crud_operations"
                },
                "ResultPath": "$.params",
                "Next": "TGW Attachment CRUD Operations"
              },
              "TGW Attachment CRUD Operations": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "CRUD Operation Completed?"
              },
              "CRUD Operation Completed?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.AttachmentState",
                    "StringEquals": "rejected",
                    "Next": "Update DynamoDB Pass"
                  },
                  {
                    "Variable": "$.AttachmentState",
                    "StringEquals": "failed",
                    "Next": "Update DynamoDB Pass"
                  },
                  {
                    "Variable": "$.AttachmentState",
                    "StringEquals": "deleted",
                    "Next": "Route CRUD Operations Pass"
                  },
                  {
                    "Variable": "$.AttachmentState",
                    "StringEquals": "available",
                    "Next": "Route CRUD Operations Pass"
                  }
                ],
                "Default": "Wait for CRUD operation to finish"
              },
              "Wait for CRUD operation to finish": {
                "Type": "Wait",
                "Seconds": 15,
                "Next": "Get TGW Attachment State Pass"
              },
              "Get TGW Attachment State Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "TransitGateway",
                  "FunctionName": "get_transit_gateway_vpc_attachment_state"
                },
                "ResultPath": "$.params",
                "Next": "Get TGW Attachment State"
              },
              "Get TGW Attachment State": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "CRUD Operation Completed?"
              },
              "VPC Tagged?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "And": [
                      {
                        "Variable": "$.VpcTagFound",
                        "StringEquals": "yes"
                      },
                      {
                        "Variable": "$.TgwAttachmentExist",
                        "StringEquals": "yes"
                      }
                    ],
                    "Next": "Association Changed?"
                  }
                ],
                "Default": "Update DynamoDB Pass"
              },
              "Association Changed?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.UpdateAssociationRouteTableId",
                    "StringEquals": "yes",
                    "Next": "Existing Association?"
                  }
                ],
                "Default": "Get TGW Attachment Propagations Pass"
              },
              "Existing Association?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Not": {
                      "Variable": "$.ExistingAssociationRouteTableId",
                      "StringEquals": "none"
                    },
                    "Next": "Disassociate TGW Route Table Pass"
                  }
                ],
                "Default": "Associate TGW Route Table Pass"
              },
              "Disassociate TGW Route Table Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "TransitGateway",
                  "FunctionName": "disassociate_transit_gateway_route_table"
                },
                "ResultPath": "$.params",
                "Next": "Disassociate TGW Route Table"
              },
              "Disassociate TGW Route Table": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "Associate TGW Route Table Pass"
              },
              "Associate TGW Route Table Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "TransitGateway",
                  "FunctionName": "associate_transit_gateway_route_table"
                },
                "ResultPath": "$.params",
                "Next": "Associate TGW Route Table"
              },
              "Associate TGW Route Table": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "Get TGW Attachment Propagations Pass"
              },
              "Get TGW Attachment Propagations Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "TransitGateway",
                  "FunctionName": "get_transit_gateway_attachment_propagations"
                },
                "ResultPath": "$.params",
                "Next": "Get TGW Attachment Propagations"
              },
              "Get TGW Attachment Propagations": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "Enable TGW Attachment Propagations Pass"
              },
              "Enable TGW Attachment Propagations Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "TransitGateway",
                  "FunctionName": "enable_transit_gateway_route_table_propagation"
                },
                "ResultPath": "$.params",
                "Next": "Enable TGW Attachment Propagations"
              },
              "Enable TGW Attachment Propagations": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "Disable TGW Attachment Propagations Pass"
              },
              "Disable TGW Attachment Propagations Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "TransitGateway",
                  "FunctionName": "disable_transit_gateway_route_table_propagation"
                },
                "ResultPath": "$.params",
                "Next": "Disable TGW Attachment Propagations"
              },
              "Disable TGW Attachment Propagations": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "Update DynamoDB Pass"
              },
              "Route CRUD Operations Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "VPC",
                  "FunctionName": "default_route_crud_operations"
                },
                "ResultPath": "$.params",
                "Next": "Route CRUD Operations"
              },
              "Route CRUD Operations": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "Next": "VPC Tagged?"
              },
              "Update DynamoDB Pass": {
                "Type": "Pass",
                "Result": {
                  "ClassName": "DynamoDb",
                  "FunctionName": "put_item"
                },
                "ResultPath": "$.params",
                "Next": "Update DynamoDB"
              },
              "Update DynamoDB": {
                "Type": "Task",
                "Resource": "${StateMachineLambda.Arn}",
                "End": true
              }
            }
          }

  SendCFNParameters:
    Type: Custom::SendCFNParameters
    Properties:
      PrincipalType: !Ref PrincipalType
      ApprovalNotification: !Ref ApprovalNotification
      AuditTrailRetentionPeriod: !Ref AuditTrailRetentionPeriod
      DefaultRoute: !Ref DefaultRoute
      MetricsFlag: !FindInMap [Solution, Metrics, SendAnonymousData]
      SolutionVersion: v1.0.0
      ServiceToken: !GetAtt CustomResourceLambda.Arn

##########################
  # Outputs #
##########################
Outputs:
  TGWId:
    Value: !Ref AWSTransitGateway
  APPINTNATTGWRT:
    Value: !Ref APPINTNATTGWRouteTable
  INTNATINTNATTGW:
    Value: !Ref INTNATINTNATTGWRouteTable
  ResourceShareArn:
    Value: !GetAtt TGWResourceShare.Arn
  SolutionVersion:
    Description: Version Number
    Value: v1.0.0
  DynamoDBTable:
    Description: The name of the Amazon DynamoDB table containing data of network requests
    Value: !Ref DynamoDbTable